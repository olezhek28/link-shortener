// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkShortenerServiceClient is the client API for LinkShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkShortenerServiceClient interface {
	GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error)
	GetLongLink(ctx context.Context, in *GetLongLinkRequest, opts ...grpc.CallOption) (*GetLongLinkResponse, error)
}

type linkShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkShortenerServiceClient(cc grpc.ClientConnInterface) LinkShortenerServiceClient {
	return &linkShortenerServiceClient{cc}
}

func (c *linkShortenerServiceClient) GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error) {
	out := new(GetShortLinkResponse)
	err := c.cc.Invoke(ctx, "/api.link_shortener.v1.LinkShortenerService/GetShortLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkShortenerServiceClient) GetLongLink(ctx context.Context, in *GetLongLinkRequest, opts ...grpc.CallOption) (*GetLongLinkResponse, error) {
	out := new(GetLongLinkResponse)
	err := c.cc.Invoke(ctx, "/api.link_shortener.v1.LinkShortenerService/GetLongLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkShortenerServiceServer is the server API for LinkShortenerService service.
// All implementations must embed UnimplementedLinkShortenerServiceServer
// for forward compatibility
type LinkShortenerServiceServer interface {
	GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error)
	GetLongLink(context.Context, *GetLongLinkRequest) (*GetLongLinkResponse, error)
	mustEmbedUnimplementedLinkShortenerServiceServer()
}

// UnimplementedLinkShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLinkShortenerServiceServer struct {
}

func (UnimplementedLinkShortenerServiceServer) GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLink not implemented")
}
func (UnimplementedLinkShortenerServiceServer) GetLongLink(context.Context, *GetLongLinkRequest) (*GetLongLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLongLink not implemented")
}
func (UnimplementedLinkShortenerServiceServer) mustEmbedUnimplementedLinkShortenerServiceServer() {}

// UnsafeLinkShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkShortenerServiceServer will
// result in compilation errors.
type UnsafeLinkShortenerServiceServer interface {
	mustEmbedUnimplementedLinkShortenerServiceServer()
}

func RegisterLinkShortenerServiceServer(s grpc.ServiceRegistrar, srv LinkShortenerServiceServer) {
	s.RegisterService(&LinkShortenerService_ServiceDesc, srv)
}

func _LinkShortenerService_GetShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServiceServer).GetShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.link_shortener.v1.LinkShortenerService/GetShortLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServiceServer).GetShortLink(ctx, req.(*GetShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkShortenerService_GetLongLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLongLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkShortenerServiceServer).GetLongLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.link_shortener.v1.LinkShortenerService/GetLongLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkShortenerServiceServer).GetLongLink(ctx, req.(*GetLongLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkShortenerService_ServiceDesc is the grpc.ServiceDesc for LinkShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.link_shortener.v1.LinkShortenerService",
	HandlerType: (*LinkShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortLink",
			Handler:    _LinkShortenerService_GetShortLink_Handler,
		},
		{
			MethodName: "GetLongLink",
			Handler:    _LinkShortenerService_GetLongLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "link_shortener/v1/link_shortener.proto",
}
